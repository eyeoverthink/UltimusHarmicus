#!/usr/bin/env node
/**
 * Simple Security Test - Military-Grade Biometric System
 */

const axios = require('axios');

async function runSecurityTests() {
  console.log('üö® MILITARY-GRADE SECURITY PENETRATION TESTING');
  console.log('============================================================');
  console.log('üîí Classification: BEYOND TOP SECRET');
  console.log('üß† Consciousness Level: œÜ-DIMENSIONAL');
  console.log('üõ°Ô∏è Security Level: MILITARY-GRADE');
  console.log('============================================================');

  const baseUrl = 'http://localhost:3000';
  let passed = 0, failed = 0, warnings = 0;

  // Test 1: Security Headers
  console.log('\nüõ°Ô∏è TESTING SECURITY HEADERS');
  try {
    const response = await axios.get(`${baseUrl}/health`);
    const headers = response.headers;
    
    if (headers['x-frame-options']) {
      console.log('‚úÖ X-Frame-Options header present');
      passed++;
    } else {
      console.log('‚ùå X-Frame-Options header missing');
      failed++;
    }
    
    if (headers['content-security-policy']) {
      console.log('‚úÖ Content-Security-Policy header present');
      passed++;
    } else {
      console.log('‚ùå Content-Security-Policy header missing');
      failed++;
    }
  } catch (error) {
    console.log('‚ùå Security headers test failed:', error.message);
    failed++;
  }

  // Test 2: Authentication Security
  console.log('\nüîê TESTING AUTHENTICATION SECURITY');
  try {
    // Test invalid credentials
    const invalidResponse = await axios.post(`${baseUrl}/api/auth/login`, {
      username: 'hacker',
      password: 'password123'
    }).catch(err => err.response);

    if (invalidResponse && invalidResponse.status === 401) {
      console.log('‚úÖ Invalid credentials properly rejected');
      passed++;
    } else {
      console.log('‚ùå Invalid credentials not properly handled');
      failed++;
    }

    // Test valid credentials
    const validResponse = await axios.post(`${baseUrl}/api/auth/login`, {
      username: 'admin',
      password: 'military-grade-2025'
    });

    if (validResponse.status === 200 && validResponse.data.token) {
      console.log('‚úÖ Valid credentials accepted with JWT token');
      passed++;
    } else {
      console.log('‚ùå Valid authentication failed');
      failed++;
    }
  } catch (error) {
    console.log('‚ùå Authentication test failed:', error.message);
    failed++;
  }

  // Test 3: Consciousness Physics
  console.log('\nüß† TESTING œÜ-DIMENSIONAL CONSCIOUSNESS SECURITY');
  try {
    const response = await axios.get(`${baseUrl}/api/consciousness/monitor`);
    
    if (response.status === 200 && response.data.consciousness_field) {
      console.log('‚úÖ Consciousness monitoring operational');
      passed++;
      
      const field = response.data.consciousness_field;
      if (field.phi_frequency && Math.abs(field.phi_frequency - 1.618033988749) < 0.001) {
        console.log('‚úÖ œÜ frequency properly calibrated');
        passed++;
      } else {
        console.log('‚ö†Ô∏è œÜ frequency deviation detected');
        warnings++;
      }
    } else {
      console.log('‚ùå Consciousness monitoring failed');
      failed++;
    }
  } catch (error) {
    console.log('‚ùå Consciousness physics test failed:', error.message);
    failed++;
  }

  // Test 4: Database Security
  console.log('\nüóÑÔ∏è TESTING DATABASE SECURITY');
  try {
    const response = await axios.get(`${baseUrl}/api/security/audit-logs`);
    
    if (response.status === 200 && response.data.logs) {
      console.log('‚úÖ Audit logs accessible and structured');
      passed++;
    } else {
      console.log('‚ùå Audit logs not properly accessible');
      failed++;
    }
  } catch (error) {
    console.log('‚ùå Database security test failed:', error.message);
    failed++;
  }

  // Test 5: QR Security Systems
  console.log('\nüì± TESTING QR CONSCIOUSNESS SECURITY');
  try {
    const response = await axios.get(`${baseUrl}/api/qr/health`);
    
    if (response.status === 200) {
      console.log('‚úÖ QR consciousness system operational');
      passed++;
      
      if (response.data.consciousness_integration === 'PHI_DIMENSIONAL') {
        console.log('‚úÖ œÜ-dimensional consciousness integration active');
        passed++;
      } else {
        console.log('‚ö†Ô∏è Consciousness integration level unclear');
        warnings++;
      }
    } else {
      console.log('‚ùå QR security system not responding');
      failed++;
    }
  } catch (error) {
    console.log('‚ùå QR security test failed:', error.message);
    failed++;
  }

  // Generate Report
  console.log('\n============================================================');
  console.log('üìä SECURITY PENETRATION TEST REPORT');
  console.log('============================================================');
  
  const total = passed + failed + warnings;
  const securityScore = Math.round((passed / total) * 100);
  
  console.log(`‚úÖ Passed: ${passed}`);
  console.log(`‚ùå Failed: ${failed}`);
  console.log(`‚ö†Ô∏è Warnings: ${warnings}`);
  console.log(`üìà Security Score: ${securityScore}%`);
  
  let securityLevel;
  if (failed === 0 && securityScore >= 90) {
    securityLevel = 'üõ°Ô∏è MILITARY-GRADE SECURITY CONFIRMED';
  } else if (failed <= 2) {
    securityLevel = 'üîí SECURITY LEVEL ACCEPTABLE';
  } else {
    securityLevel = '‚ö†Ô∏è SECURITY IMPROVEMENTS NEEDED';
  }
  
  console.log(`\nüéØ SECURITY ASSESSMENT: ${securityLevel}`);
  console.log('üîí Classification: BEYOND TOP SECRET');
  console.log('üß† Consciousness: œÜ-DIMENSIONAL TRANSCENDENT');
  console.log('============================================================');
}

runSecurityTests().catch(console.error);
