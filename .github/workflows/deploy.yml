name: Deploy Biometric Security System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  biometric-tests:
    runs-on: ubuntu-latest
    name: Biometric Algorithm Tests
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest cryptography numpy
    
    - name: Run biometric security tests
      run: |
        python -m pytest military_security_penetration_test.py -v
        python -m pytest formal_cryptographic_verification.py -v
        python -m pytest comprehensive_threat_modeling_analysis.py -v
    
    - name: Run consciousness physics tests
      run: |
        python -m pytest integrated_consciousness_security_system.py -v

  frontend-build:
    runs-on: ubuntu-latest
    name: Frontend Build and Test
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: npm run build
      env:
        CI: false
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        REACT_APP_MONGODB_URI: ${{ secrets.MONGODB_URI }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: build/

  api-tests:
    runs-on: ubuntu-latest
    name: API Integration Tests
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Initialize MongoDB schema
      run: |
        mongosh mongodb://admin:password@localhost:27017/biometric_test --authenticationDatabase admin < mongodb_schema.js
    
    - name: Run API tests
      run: npm run test:api
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/biometric_test
        JWT_SECRET: test_secret_key
        NODE_ENV: test

  deploy-staging:
    needs: [security-scan, biometric-tests, frontend-build, api-tests]
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build/
    
    - name: Deploy to GitHub Pages (Staging)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        destination_dir: staging
        cname: staging.biometric-security.dev
    
    - name: Deploy API to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./api
        alias-domains: |
          api-staging.biometric-security.dev

  security-hardening:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    name: Security Hardening Verification
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'https://staging.biometric-security.dev'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Test biometric security endpoints
      run: |
        curl -f https://api-staging.biometric-security.dev/health
        curl -f https://api-staging.biometric-security.dev/api/security/status
    
    - name: Verify consciousness physics integration
      run: |
        python test_consciousness_integration.py --url https://api-staging.biometric-security.dev

  deploy-production:
    needs: [security-hardening]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build/
    
    - name: Security pre-deployment check
      run: |
        python military_security_penetration_test.py
        python formal_cryptographic_verification.py
    
    - name: Deploy to GitHub Pages (Production)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
        cname: biometric-security.com
    
    - name: Deploy API to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./api
        alias-domains: |
          api.biometric-security.com
        vercel-args: '--prod'
    
    - name: Update MongoDB production indexes
      run: |
        mongosh "${{ secrets.MONGODB_PROD_URI }}" < mongodb_schema.js
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'ðŸš€ Biometric Security System deployed to production successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  post-deployment-monitoring:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    name: Post-Deployment Monitoring
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Health check production endpoints
      run: |
        sleep 60  # Wait for deployment to propagate
        curl -f https://biometric-security.com
        curl -f https://api.biometric-security.com/health
        curl -f https://api.biometric-security.com/api/security/status
    
    - name: Run production security validation
      run: |
        python comprehensive_threat_modeling_analysis.py --production-check
    
    - name: Test Ï†-dimensional consciousness integration
      run: |
        python integrated_consciousness_security_system.py --production-test
    
    - name: Monitor biometric authentication performance
      run: |
        python -c "
        import requests
        import time
        
        # Test biometric authentication endpoint
        response = requests.get('https://api.biometric-security.com/api/biometric/health')
        assert response.status_code == 200
        
        # Test consciousness physics endpoint
        response = requests.get('https://api.biometric-security.com/api/consciousness/status')
        assert response.status_code == 200
        
        print('âœ… Production monitoring: All systems operational')
        print('ðŸ§  Consciousness integration: Active')
        print('ðŸ”’ Security systems: Military-grade operational')
        print('ðŸ“± QR systems: Recursive consciousness chains active')
        "
    
    - name: Setup continuous monitoring
      run: |
        # Setup monitoring alerts for production
        echo "Setting up 24/7 monitoring for military-grade security system"
        echo "Monitoring: Authentication rates, security threats, consciousness coherence"
